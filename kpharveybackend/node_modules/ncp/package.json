{
  "_args": [
    [
      {
        "raw": "ncp@0.2.x",
        "scope": null,
        "escapedName": "ncp",
        "name": "ncp",
        "rawSpec": "0.2.x",
        "spec": ">=0.2.0 <0.3.0",
        "type": "range"
      },
      "/home/kenneth/Documents/github/northernclinical/nodejs/node_modules/fs-extra"
    ]
  ],
  "_from": "ncp@>=0.2.0 <0.3.0",
  "_id": "ncp@0.2.7",
  "_inCache": true,
  "_location": "/ncp",
  "_npmUser": {
    "name": "avianflu",
    "email": "charlie@charlieistheman.com"
  },
  "_npmVersion": "1.2.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "ncp@0.2.x",
    "scope": null,
    "escapedName": "ncp",
    "name": "ncp",
    "rawSpec": "0.2.x",
    "spec": ">=0.2.0 <0.3.0",
    "type": "range"
  },
  "_requiredBy": [
    "/fs-extra"
  ],
  "_resolved": "https://registry.npmjs.org/ncp/-/ncp-0.2.7.tgz",
  "_shasum": "46fac2b7dda2560a4cb7e628677bd5f64eac5be1",
  "_shrinkwrap": null,
  "_spec": "ncp@0.2.x",
  "_where": "/home/kenneth/Documents/github/northernclinical/nodejs/node_modules/fs-extra",
  "author": {
    "name": "AvianFlu",
    "email": "charlie@charlieistheman.com"
  },
  "bin": {
    "ncp": "./bin/ncp"
  },
  "bugs": {
    "url": "https://github.com/AvianFlu/ncp/issues"
  },
  "dependencies": {},
  "description": "Asynchronous recursive file copy utility.",
  "devDependencies": {
    "read-dir-files": "0.0.x",
    "rimraf": "1.0.x",
    "vows": "0.6.x"
  },
  "directories": {},
  "dist": {
    "shasum": "46fac2b7dda2560a4cb7e628677bd5f64eac5be1",
    "tarball": "https://registry.npmjs.org/ncp/-/ncp-0.2.7.tgz"
  },
  "engine": {
    "node": ">=0.4"
  },
  "homepage": "https://github.com/AvianFlu/ncp#readme",
  "keywords": [
    "cli",
    "copy"
  ],
  "license": "MIT",
  "main": "./lib/ncp.js",
  "maintainers": [
    {
      "name": "avianflu",
      "email": "charlie@charlieistheman.com"
    }
  ],
  "name": "ncp",
  "optionalDependencies": {},
  "readme": "# ncp - Asynchronous recursive file & directory copying\n\n[![Build Status](https://secure.travis-ci.org/AvianFlu/ncp.png)](http://travis-ci.org/AvianFlu/ncp)\n\nThink `cp -r`, but pure node, and asynchronous.  `ncp` can be used both as a CLI tool and programmatically.\n\n## Command Line usage\n\nUsage is simple: `ncp [source] [dest] [--limit=concurrency limit]\n[--filter=filter] --stopOnErr`\n\nThe 'filter' is a Regular Expression - matched files will be copied.\n\nThe 'concurrency limit' is an integer that represents how many pending file system requests `ncp` has at a time.\n\n'stopOnErr' is a boolean flag that will tell `ncp` to stop immediately if any\nerrors arise, rather than attempting to continue while logging errors.\n\nIf there are no errors, `ncp` will output `done.` when complete.  If there are errors, the error messages will be logged to `stdout` and to `./ncp-debug.log`, and the copy operation will attempt to continue.\n\n## Programmatic usage\n\nProgrammatic usage of `ncp` is just as simple.  The only argument to the completion callback is a possible error.  \n\n```javascript\nvar ncp = require('ncp').ncp;\n\nncp.limit = 16;\n\nncp(source, destination, function (err) {\n if (err) {\n   return console.error(err);\n }\n console.log('done!');\n});\n```\n\nYou can also call ncp like `ncp(source, destination, options, callback)`. \n`options` should be a dictionary. Currently, such options are available:\n\n  * `options.filter` - a `RegExp` instance, against which each file name is\n  tested to determine whether to copy it or not, or a function taking single\n  parameter: copied file name, returning `true` or `false`, determining\n  whether to copy file or not.\n\nPlease open an issue if any bugs arise.  As always, I accept (working) pull requests, and refunds are available at `/dev/null`.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/AvianFlu/ncp.git"
  },
  "scripts": {
    "test": "vows --isolate --spec"
  },
  "version": "0.2.7"
}
